#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Public/Platform.ush"
// clang-format off

Texture2D		InputTexture;
SamplerState	InputTextureSampler;

float3x3 CharmAssembleTangentToWorld(float4 TangentToWorld0, float4 TangentToWorld1, float4 TangentToWorld2)
{
    // float3 TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0.xyz) * TangentToWorld2.w;
    return float3x3(TangentToWorld0.xyz, TangentToWorld1.xyz, TangentToWorld2.xyz);
}


/* Pixel shader
=============================================================================*/

void MainPS(
    float4 InPosition : SV_POSITION,
    float2 InUV : TEXCOORD0,
    float4 TangentToWorld0 : TEXCOORD10_centroid,
    float4 TangentToWorld1 : TEXCOORD11_centroid,
    float4 TangentToWorld2 : TEXCOORD12_centroid,
    nointerpolation uint PrimitiveId : PRIMITIVE_ID,
    out float4 OutSceneColor : SV_Target0,
    out float4 OutGBufferA : SV_Target1, // rgb = world normal
    out float4 OutGBufferB : SV_Target2, // r = metallic, g = specular, b = roughness, a = ShadingModelID
    out float4 OutGBufferC : SV_Target3, // rgb = base colour, a = ambient occlusion
    out float4 OutGBufferD : SV_Target4,
    out float4 OutGBufferE : SV_Target5,
    out float OutSceneDepth : SV_Depth
)
{
    float4 InMRT1 = SceneTexturesStruct_GBufferATexture.Load(int3(InPosition.xy, 0)).xyzw;
    float4 InMRT2 = SceneTexturesStruct_GBufferBTexture.Load(int3(InPosition.xy, 0)).xyzw;
    float4 InMRT3 = SceneTexturesStruct_GBufferCTexture.Load(int3(InPosition.xy, 0)).xyzw;
    float4 InMRT4 = SceneTexturesStruct_GBufferDTexture.Load(int3(InPosition.xy, 0)).xyzw;
    float4 InMRT5 = SceneTexturesStruct_GBufferETexture.Load(int3(InPosition.xy, 0)).xyzw;
    
    ResolvedView = ResolveView();

    FGBufferData GBuffer = (FGBufferData)0;; // <--- use this!!!
    // float2 ScreenUV = SvPositionToBufferUV(InPosition);
    // make SvPosition appear to be rasterized with the depth from the depth buffer
    // SvPosition.z = LookupDeviceZ(ScreenUV);
    // float SceneDepth = CalcSceneDepth(ScreenUV);
    // FGBufferData GBufferData = GetGBufferData(ScreenUV);

    OutSceneColor.xyzw = 0;
    // OutGBufferA.xyzw = 0;
    // OutGBufferB.xyzw = 0;
    // OutGBufferC.xyzw = 0;
    // OutGBufferD.xyzw = 0;
    // OutGBufferE.xyzw = 0;
    //
    // OutGBufferA.xyz = float3(1, 1, 1);
    // OutGBufferA.w = 1;  // custom data unk
    // OutGBufferB.x = 1; // test set completely metallic
    // OutGBufferB.y = 0.5; // test set 0.5 specular
    // OutGBufferB.w = EncodeShadingModelIdAndSelectiveOutputMask(SHADINGMODELID_DEFAULT_LIT, 0);
    // OutGBufferC.xyz = float3(1, 0, 0); // test set completely blue
    // OutGBufferE.xyzw = 1;

    float3x3 TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);
    float3 MaterialNormal = float3(0, 0, 1);
    MaterialNormal = normalize(MaterialNormal);
    float3 WorldNormal = TransformTangentNormalToWorld(TangentToWorld, MaterialNormal);


    // float3 BaseColor = float3(0.25, 1.0, 0);
    // float4 BaseColor = Texture2DSample(InTexture, InTextureSampler, InUV);
    float4 BaseColor = InputTexture.Sample(InputTextureSampler, InUV.xy);
    BaseColor.w = 1;
    float Metallic = 0.8;
    float Specular = 0.5;
    float Roughness = 0.9;
    float Anisotropy = 0.0;
    int ShadingModel = SHADINGMODELID_DEFAULT_LIT;

    // GBuffer.GBufferAO = MaterialAO;
    // GBuffer.PerObjectGBufferData = GetPrimitive_PerObjectGBufferData(MaterialParameters.PrimitiveId);
    GBuffer.Depth = 1;
    GBuffer.PrecomputedShadowFactors = 1;
    GBuffer.WorldNormal = WorldNormal;
    // GBuffer.WorldTangent = WorldTangent;
    GBuffer.BaseColor = BaseColor;
    GBuffer.Metallic = Metallic;
    GBuffer.Specular = Specular;
    GBuffer.Roughness = Roughness;
    GBuffer.Anisotropy = Anisotropy;
    GBuffer.ShadingModelID = ShadingModel;

    // GBuffer.SelectiveOutputMask = GetSelectiveOutputMask() >> 4;
    GBuffer.Velocity = 0;
    GBuffer.SpecularColor = ComputeF0(Specular, BaseColor, Metallic);
    GBuffer.DiffuseColor = BaseColor - BaseColor * Metallic;
    
    // GBuffer.GBufferAO = AOMultiBounce( Luminance( GBuffer.SpecularColor ), SpecOcclusion ).g;
    // GBuffer.DiffuseIndirectSampleOcclusion = GetDiffuseIndirectSampleOcclusion(GBuffer, MaterialParameters, In.SvPosition.xy, MaterialAO);

    float4 OutVelocity;
    float QuantizationBias = PseudoRandom( InPosition.xy ) - 0.5f;
    EncodeGBuffer(GBuffer, OutGBufferA, OutGBufferB, OutGBufferC, OutGBufferD, OutGBufferE, OutVelocity, QuantizationBias);
    
    OutSceneDepth = 10/InPosition.w;
    float test = 10/InPosition.w;
    if (test > InMRT3.w)
    {
        OutGBufferC = test;
    }
    // OutGBufferC = 10/InPosition.w;
    OutGBufferD = 10/InPosition.w;
    OutGBufferE = 10/InPosition.w;
}